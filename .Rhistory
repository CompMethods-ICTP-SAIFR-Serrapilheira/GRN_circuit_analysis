View(rawdata)
rawdata[1,1]
rawdata[1]
rawdata[2]
rawdata[,1]
rawdata[1,1]
rawdata[1]
rawdata[1,1]
rawdata$MA[1]
rawdata$MA[67]
rawdata$MA[1:2]
rawdata[1,1:3]
dim(rawdata)
rawdata[1:2]
GRNS <- rawdata[1:12]
GRNs[ ,1]
GRNS <- rawdata[1:12]
GRNs <- rawdata[1:12]
GRNs[ ,1]
GRNs[1]
GRNs[1,1]
GRNs[ , 2]
class(GRNs)
GRNs[ , 10]
GRNs[ , 118]
GRNs[ , 18]
GRNs[ , 12]
GRNs[ , 12, 1]
GRNs[ , 12, 1, 1]
GRNs[ , 12, 1]
GRNs[1]
GRNs[1,2]
head(GRNs[1])
head(GRNs[, 1])
GRNs[, 1]
GRNs[1, ]
as.matrix(GRNs[1, ], nrows = 3)
GRNs[1, ] #Single GRN
#Each GRN (row) is converted into a matrix
as.matrix(GRNs[1, ], nrows = 3)
GRNs
GRNs[1, ]
GRNs[1, ] #Single GRN
#Each GRN (row) is converted into a matrix
GRN1 -> as.matrix(GRNs[1, ], nrows = 3)
#Each GRN (row) is converted into a matrix
GRN_1 -> as.matrix(GRNs[1, ], nrows = 3)
GRN_1
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], nrows = 3)
View(GRN1)
GRN1
class(GRN1)
GRN1[1]
GRN1[2]
class(GRNs[1, ])
install.packages("igraph")
library(igraph)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], nrows = 3)
class(GRN1)
g <- graph.adjacency(GRN1, mode="directed", weighted=NULL)
x <- list(a=1,b=2,c=3)
x
list.prepend(x, d=4, e=5)
list.prepend(x, d=4, e=5)
list.append(x, d=4, e=5)
x <- list(a=1,b=2,c=3)
list.append(x, d=4, e=5)
pre
list.prepend(x, d=4, e=5)
prepend(x, d=4, e=5)
aa <- c(1,2,3,4)
prepend(aa, 0, 0)
prepend(aa, 0)
list.prepend(aa, 0)
prepend(0, aa)
c(0, aa)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(c(rep(0, 4), GRNs[1, ]), nrows = 4)
GRN1[2]
GRN1
#Extraigo los datos compuestos por
rawdata <- read.csv("data/raw/raw_grns.csv")
GRNs[1, ] #Single GRN, the first
#GRN extraction
GRNs <- rawdata[1:12]
GRNs[1, ] #Single GRN, the first
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix( GRNs[1, ], nrows = 4)
GRN1
g <- graph.adjacency(GRN1, mode="directed", weighted=NULL)
GRN1
sign(GRN1)
abs(sign(GRN1))
g <- graph.adjacency(abs(sign(GRN1)), mode="directed", weighted=NULL)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix( GRNs[1, ], nrows = 4)
GRN1
class(GRNs[1, ])
class(GRN1)
#Each GRN (row) is converted into a matrix
GRN1 <- data.matrix( GRNs[1, ], nrows = 4)
#Each GRN (row) is converted into a matrix
GRN1 <- data.matrix( GRNs[1, ])
GRN1
class(GRNs[1, ])
class(GRN1)
r <- raster(ncol=3, nrow=3)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], nrows = 4)
GRN1
class(GRNs[1, ])
class(GRN1)
abs(sign(GRN1))
sapply(rawdata[1,1:3])
g <- graph.adjacency(abs(sign(GRN1)), mode="directed", weighted=NULL)
View(GRNS)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], ncol =4, nrows = 4)
class(GRNs[1, ])
class(GRN1)
GRN1
#Extraigo los datos compuestos por
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:12]
GRNs[1, ] #Single GRN, the first
View(GRN1)
GRN[1]
GRN[1]
GRN1[1]
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], ncol = 4, nrows = 4, byrow = TRUE)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = TRUE)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], ncol = 4, nrow = 4)
GRN1
class(GRN1)
dim(GRN1)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], nrow = 4)
GRN1
class(GRN1)
class(GRNs[1, ])
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(as.vector(GRNs[1, ]), nrow = 4)
GRN1
class(GRNs[1, ])
class(GRN1)
dim(GRN1)
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(as.vector(GRNs[1, ]), ncol = 4, nrow = 4)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(as.list(GRNs[1, ]), ncol = 4, nrow = 4)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(as.list(GRNs[1, ]), ncol = 4, nrow = 4, byrow = T)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- matrix(as.list(GRNs[1, ]), ncol = 4, nrow = 4, byrow = T)
#Each GRN (row) is converted into a matrix
GRN1 <- matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = T)
#Extraigo los datos compuestos por
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
GRNs[1, ] #Single GRN, the first
#Each GRN (row) is converted into a matrix
GRN1 <- matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = T)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- as.matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = T)
GRN1
#Each GRN (row) is converted into a matrix
GRN1 <- matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = T)
GRN1
dim(GRN1)
g <- graph.adjacency(abs(sign(GRN1)), mode="directed", weighted=NULL)
dim(GRN1)
g <- graph.adjacency(abs(sign(GRN1)), mode="directed", weighted=NULL)
GRNs[1, ] #Single GRN, the first
plot(g)
g <- graph.adjacency(abs(sign(GRN1)), mode = "directed", weighted = NULL)
3**9
View(GRNS)
signGRN <- sign(GRNs)
signGRN
circuits <- unique(signGRN)
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
table(signGRN)
table(signGRN)[1]
table(signGRN)[2]
for i in seq(length(duplicatedcircuits)):
signGRN.counts(duplicatedcircuits[i])
signGRN <- sign(GRNs)
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
for (i in seq(length(duplicatedcircuits)){
signGRN.counts(duplicatedcircuits[i]
}
##Abundance of every circuit
seq(length(duplicatedcircuits))
for (i in seq(length(duplicatedcircuits))) {
print(signGRN.counts(duplicatedcircuits[i])
}
print(signGRN.counts(duplicatedcircuits[i])
}
signGRN.counts(duplicatedcircuits[i]
}
##Abundance of every circuit
seq(length(duplicatedcircuits))
for (i in seq(length(duplicatedcircuits))) {
}
signGRN.counts(duplicatedcircuits[i])
class(signGRN)
class(c(signGRN))
c(signGRN)[1]
class[signGRN]
class(signGRN)
class(signGRN[1])
list(signGRN)[1]
list(signGRN[1])[1]
list(signGRN[1])[ , 1]
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
duplicatedcircuits
duplicatedcircuits[1, ]
signGRN.counts(duplicatedcircuits[i, ])
signGRN.counts(list(duplicatedcircuits[i, ])
}
##Abundance of every circuit
seq(length(duplicatedcircuits))
##Abundance of every circuit
seq(length(duplicatedcircuits[i, ]))
##Abundance of every circuit
length(duplicatedcircuits[i, ])
##Abundance of every circuit
length(duplicatedcircuits[1, ])
##Abundance of every circuit
length(duplicatedcircuits)
duplicatedcircuits
duplicatedcircuits[2, ]
duplicatedcircuits[3, ]
duplicatedcircuits[1, ]
length(duplicatedcircuits[1, ])
length(duplicatedcircuits[1])
length(duplicatedcircuits[ ,1])
View(duplicatedcircuits)
duplicatedcircuits[1, ]
?unique
?unique
#GRN diversity analysis
library(plyr)
signGRN[i, ].counts(list(duplicatedcircuits[i, ])
for (i in seq(length(duplicatedcircuits))) {
signGRN[i, ].counts(duplicatedcircuits[i, ])
signGRN[ , ].counts(duplicatedcircuits[i, ])
signGRN.counts(duplicatedcircuits[i, ])
signGRN <- ddply(signGRN,.(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC),nrow)
View(signGRN)
ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), total)
numbinteracGRN -> ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
signGRN <- sign(GRNs)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
list(signGRN[1])[ , 1]
signGRN[1]
signGRN[1, ]
signGRN <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRN <- sign(GRNs)
signGRNOcu <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
numbinteracGRN -> ddply(signGRNOcu, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
numbinteracGRN <- ddply(signGRNOcu, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
View(numbinteracGRN)
numbinteracGRN <- abs(ddply(signGRNOcu, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum))
View(numbinteracGRN)
numbinteracGRN <- ddply(abs(signGRNOcu), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
View(numbinteracGRN)
View(signGRNOcu)
signGRNOcu[-1]
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
View(numbinteracGRN)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
duplicatedcircuits
abs(duplicatecircuits)
abs(duplicatedcircuits)
transform(sum = rowSums(abs(duplicatedcircuits)))
transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
GRNScomplexity[-1]
GRNScomplexity[, -1]
GRNScomplexity[-1, ]
GRNScomplexity[1]
GRNScomplexity[-.1]
GRNScomplexity[-1]
GRNScomplexity[13]
GRNScomplexity[14]
GRNScomplexity[16]
GRNScomplexity[17]
GRNScomplexity[ , 17]
GRNScomplexity[ , -1]
GRNScomplexity[ , length(GRNScomplexity)]
comlexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
#Histogram
png(file = "complexityhistogram.png")
hist(comlexitylist, xlab = "Number of interactions", col = "darkcyan")
hist(comlexitylist, xlab = "Number of interactions", col = "darkcyan")
dev.off()
hist(c(comlexitylist), xlab = "Number of interactions", col = "darkcyan")
dev.off()
hist(list(comlexitylist), xlab = "Number of interactions", col = "darkcyan")
hist(as.list(comlexitylist), xlab = "Number of interactions", col = "darkcyan")
class(complexitylist)
comlexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
class(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
hist(list(comlexitylist), xlab = "Number of interactions", col = "darkcyan")
hist(list(complexitylist), xlab = "Number of interactions", col = "darkcyan")
hist(complexitylist, xlab = "Number of interactions", col = "darkcyan")
dev.off()
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
class(v)
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
class(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
hist(complexitylist, xlab = "Number of interactions", col = "green")
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
length(v)
length(complexitylist)
hist(complexitylist)
hist
hist(v)
class(v)
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
hist(v)
v <-  vector(9,13,21,8,36,22,12,41,31,33,19)
hist(complexitylist)
#GRN diversity analysis
library(plyr)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
length(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
hist(complexitylist)
dev.off()
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
hist(complexitylist)
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "yellow",border = "darkcyan")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "yellow",border = "cyan")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
#GRN diversity analysis
library(plyr)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
length(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
library(ggplot)
library(ggplot2)
# Create the histogram.
geom_histogram(complexitylist, xlab = "Weight",col = "darkcyan")
complexityhistogram <- ggplot(complexitylist, aes(x=value)) +
geom_histogram()
as.data.frame(complexitylist)
complexityhistogram <- ggplot(as.data.frame(complexitylist), aes(x=value)) +
geom_histogram()
complexityhistogram
View(complexityhistogram)
#GRN diversity analysis
library(plyr)
library(ggplot2)
complexityhistogram <- ggplot(as.data.frame(complexitylist), aes(x=value)) +
geom_histogram()
complexityhistogram
# dataset:
data=data.frame(value=rnorm(100))
# basic histogram
p <- ggplot(data, aes(x=value)) +
geom_histogram()
p
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
complexitylist
class(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
dev.on()
#Histogram
png(file = "images/complexityhistogram.png")
#GRN diversity analysis
library(plyr)
library(ggplot2)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
class(complexitylist)
#Histogram
png(file = "images/complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
dev.off()
#Whole GRN information extraction
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
GRNs[1, ] #Single GRN, the first
write.csv(GRNs, "data/processed/GRNs.csv")
#Each GRN (row) is converted into a matrix
GRN1 <- matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = T)
GRN1
class(GRNs[1, ])
class(GRN1)
dim(GRN1)
abs(sign(GRN1))
sapply(rawdata[1,1:3])
g <- graph.adjacency(abs(sign(GRN1)), mode = "directed", weighted = NULL)
library(igraph)
g <- graph.adjacency(abs(sign(GRN1)), mode = "directed", weighted = NULL)
class(abs(sign(GRN1)))
GRN1
class(GRNs[1, ])
class(GRN1)
dim(GRN1)
class(abs(sign(GRN1)))
abs(sign(GRN1))
sign(GRN1)
abs(sign(GRN1[1, ]))
GRN1
sapply(rawdata[1,1:3])
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
#GRN diversity analysis
library(plyr)
GRNs <- read.csv("data/processed/GRNs.csv")
#GRN extraction
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
abs(duplicatedcircuits)
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
signGRNOcu[17]
