hist(complexitylist)
hist
hist(v)
class(v)
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
hist(v)
v <-  vector(9,13,21,8,36,22,12,41,31,33,19)
hist(complexitylist)
#GRN diversity analysis
library(plyr)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
length(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
hist(complexitylist)
dev.off()
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
hist(complexitylist)
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "yellow",border = "darkcyan")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "yellow",border = "cyan")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
#GRN diversity analysis
library(plyr)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
length(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
library(ggplot)
library(ggplot2)
# Create the histogram.
geom_histogram(complexitylist, xlab = "Weight",col = "darkcyan")
complexityhistogram <- ggplot(complexitylist, aes(x=value)) +
geom_histogram()
as.data.frame(complexitylist)
complexityhistogram <- ggplot(as.data.frame(complexitylist), aes(x=value)) +
geom_histogram()
complexityhistogram
View(complexityhistogram)
#GRN diversity analysis
library(plyr)
library(ggplot2)
complexityhistogram <- ggplot(as.data.frame(complexitylist), aes(x=value)) +
geom_histogram()
complexityhistogram
# dataset:
data=data.frame(value=rnorm(100))
# basic histogram
p <- ggplot(data, aes(x=value)) +
geom_histogram()
p
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
complexitylist
class(complexitylist)
#Histogram
png(file = "complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
dev.on()
#Histogram
png(file = "images/complexityhistogram.png")
#GRN diversity analysis
library(plyr)
library(ggplot2)
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
class(complexitylist)
#Histogram
png(file = "images/complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
dev.off()
#Whole GRN information extraction
rawdata <- read.csv("data/raw/raw_grns.csv")
#GRN extraction
GRNs <- rawdata[1:16]
GRNs[1, ] #Single GRN, the first
write.csv(GRNs, "data/processed/GRNs.csv")
#Each GRN (row) is converted into a matrix
GRN1 <- matrix(GRNs[1, ], ncol = 4, nrow = 4, byrow = T)
GRN1
class(GRNs[1, ])
class(GRN1)
dim(GRN1)
abs(sign(GRN1))
sapply(rawdata[1,1:3])
g <- graph.adjacency(abs(sign(GRN1)), mode = "directed", weighted = NULL)
library(igraph)
g <- graph.adjacency(abs(sign(GRN1)), mode = "directed", weighted = NULL)
class(abs(sign(GRN1)))
GRN1
class(GRNs[1, ])
class(GRN1)
dim(GRN1)
class(abs(sign(GRN1)))
abs(sign(GRN1))
sign(GRN1)
abs(sign(GRN1[1, ]))
GRN1
sapply(rawdata[1,1:3])
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
#GRN diversity analysis
library(plyr)
GRNs <- read.csv("data/processed/GRNs.csv")
#GRN extraction
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
abs(duplicatedcircuits)
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[-1]
signGRNOcu[17]
GRNs <- read.csv("data/processed/GRNs.csv")
View(GRNs)
#GRN extraction
signGRN <- sign(GRNs)
View(signGRN)
#Topological considerations
data <- read.csv("./raw_grns.csv")
data <- data[,5:16]
GRN <- sign(data)
#Topological considerations
data <- read.csv("./raw_grns.csv")
#Topological considerations
data <- read.csv("./raw/raw_grns.csv")
#Topological considerations
data <- read.csv("data/raw/raw_grns.csv")
data <- data[,5:16]
GRN <- sign(data)
GRNs <- sign(data)
net <- unique(GRN) #topologies without repetition
#GRN diversity analysis
library(plyr)
GRNs <- read.csv("data/processed/GRNs.csv")
#GRN extraction
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[17]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
View(numbinteracGRN)
GRNs <- read.csv("data/processed/GRNs.csv")
circuits <- unique(GRNs)
net <- unique(GRNs) #topologies without repetition
GRNs <- read.csv("data/processed/GRNs.csv")
circuits <- unique(GRNs)
circuits <- unique(GRNs)
length(circuits)
length(circuits[1])
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
View(singleGRNS)
net <- unique(GRNs) #topologies without repetition
#Topological considerations
data <- read.csv("data/raw/raw_grns.csv")
data <- data[,5:16]
GRNs <- sign(data)
net <- unique(GRNs) #topologies without repetition
net1 <- data.matrix(net)
net2 <- data.matrix(net)
net3 <- data.matrix(net)
net4 <- data.matrix(net)
net5 <- data.matrix(net)
source("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
redundant_source
redundant_target
881-180
library(plyr)
singleGRNS <- ddply(GRNs, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
net <- unique(GRNs) #topologies without repetition
net <- singleGRNS[,-1]
singleGRNS <- ddply(GRNs, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
net <- singleGRNS[,-13]
source("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
source("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
source("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
singleGRNS <- singleGRNS[,-redundant_target]
View(singleGRNS)
singleGRNS <- singleGRNS[,c(-redundant_target)]
singleGRNS <- singleGRNS[,c(-redundant_target)]
singleGRNS <- singleGRNS[c(-redundant_target), ]
739+176
unique(redundant_target)
length(unique(redundant_target))
881-142
View(singleGRNS)
for(i in seq(1, length(redundant_source))){
singleGRNS$V1[redundant_source[i]] <- singleGRNS$V1[redundant_source[i]] +
singleGRNS$V1[redundant_target[i]]
}
debugSource("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
singleGRNS$V1[redundant_source[i]]
singleGRNS$V1[redundant_target[i]]
redundant_source[i]
histogram(singleGRNS$V1)
hist(singleGRNS$V1)
hist(singleGRNS$V1)
write.csv(singleGRNS, "output/singleGRNS.csv")
singleGRNS <- singleGRNS[c(-redundant_target), ]
write.csv(singleGRNS, "output/singleGRNS.csv")
singletopologies <- ddply(GRNs, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
net <- singletopologies[,-13]
net1 <- data.matrix(net)
net2 <- data.matrix(net)
net3 <- data.matrix(net)
net4 <- data.matrix(net)
net5 <- data.matrix(net)
net6 <- data.matrix(net)
#[, c(1,2,3,4,5,6,7,8,9,10,11,12)]
net2 <- net2[, c(5,7,6,8,1,3,2,4,9,11,10,12)] # ABC -> BAC
net3 <- net3[, c(9,12,11,10,5,8,7,6,1,4,3,2)] # ABC -> CBA
net4 <- net4[, c(5,7,8,6,9,11,12,10,1,3,4,2)] # ABC -> BCA
net5 <- net5[, c(9,12,10,11,1,4,2,3,5,8,6,7)] # ABC -> CAB
net6 <- net6[, c(1,2,4,3,9,10,12,11,5,6,8,7)] # ABC -> ACB
net <- data.frame(net1,net2,net3,net4,net5,net6)
colnames(net) <- NULL
net <- data.matrix(net)
redundant_source <- c()
redundant_target <- c()
redundant_permute <- c()
for(i in seq(1, length(net[,1]))){
flag_redundant <- FALSE
i_net <- net[i,1:12]
if(i %in% redundant_target){
next
}
for(j in seq(1, length(net[,1]))){
for(k in seq(2,5)){
if(j!=i){
j_net <- net[j,(1+(k-1)*12):(k*12)]
if(sum(i_net==j_net)==12){
flag_redundant <- TRUE
redundant_source <- append(redundant_source, i)
redundant_target <- append(redundant_target, j)
redundant_permute <- append(redundant_permute, k)
break
}
}
}
}
print(i)
}
for(i in seq(1, length(redundant_source))){
singletopologies$V1[redundant_source[i]] <- singletopologies$V1[redundant_source[i]] +
singletopologies$V1[redundant_target[i]]
}
singletopologies <- singletopologies[c(-redundant_target), ]
write.csv(singletopologies, "output/singletopologies.csv")
singletopologies <- read.csv("data/output/singletopologies.csv")
singletopologies <- read.csv("output/singletopologies.csv")
hist(singleGRNS$V1,)
hist(singleGRNS$V1, breaks = 10)
hist(singleGRNS$V1, breaks = 100)
hist(singleGRNS$V1, breaks = 50)
hist(singleGRNS$V1, breaks = 20)
hist(singleGRNS$V1, breaks = 20, xlab = "Number of topologies",
ylab = "Number of GRNs", col = "orange")
View(singletopologies)
max(singleGRNS$V1)
hist(singleGRNS$V1, breaks = 20, xlab = "Number of GRNs",
ylab = "Number of topologies", col = "orange")
hist(singleGRNS$V1, breaks = 20, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange")
library(vegan)
sum(singleGRNS$V1)
hist(singletopologies$V1, breaks = 20, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange")
hist(singletopologies$V1, breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange")
sum(singletopologies$V1)
library(plyr)
#Topological considerations
data <- read.csv("data/raw/raw_grns.csv")
data <- data[,5:16]
GRNs <- sign(data)
singletopologies <- ddply(GRNs, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
sum(singletopologies$V1)
debugSource("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
sum(singletopologies$V1)
sum(singletopologies$V1)
diversity(singletopologies$V1,"shannon")
diversity(singletopologies$V1,"simpson")
diversity(singletopologies$V1,"invsimpson")
diversity(singletopologies$V1,"simpson")
renyiGRNS <- renyi(singletopologies$V1)
renyiGRNS
hist(singletopologies$V1, breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange", main = "Abundance of
topologies")
singletopologies <- read.csv("output/singletopologies.csv")
install.packages("factoextra")
library(factoextra)
singletopologies <- read.csv("output/singletopologies.csv")
km <- kmeans(singletopologies, centers = 4, nstart = 25)
fviz_cluster(km, data = df)
head(singletopologies)
head(singletopologies[2:14])
head(singletopologies[2:13])
singletopologies[2:13]
km <- kmeans(singletopologies[2:13], centers = 4, nstart = 25)
fviz_cluster(km, data = df)
km <- kmeans(singletopologies[2:13], centers = 5, nstart = 25)
fviz_cluster(km, data = df)
singletopologies <- read.csv("output/singletopologies.csv")
singletopologies <- singletopologies[2:12] #only the vector of interactions
singletopologies
distances <- vegdist(singletopologies)
b_cluster <- hclust(bray_distance, method = "average")
b_cluster <- hclust(distance, method = "average")
b_cluster <- hclust(distances, method = "average")
plot(b_cluster)
distances
agnes(singletopologies, metric = "manhattan")
library(cluster)
agnes(singletopologies, metric = "manhattan")
clustersGRNS
clustersGRNS <- agnes(singletopologies, metric = "manhattan")
plot.agnes(clustersGRNS)
plot.agnes(clustersGRNS)
plot.agnes(clustersGRNS, which.plots = 1)
daisy(clustersGRNS, metric = "manhattan")
class(clustersGRNS)
daisy(singletopologies, metric = "manhattan")
daiGRN <- daisy(singletopologies, metric = "manhattan")
clustersGRNS <- agnes(singletopologies, metric = "manhattan")
plot(clustersGRNS, which.plots = 1)
daiGRN <- daisy(singletopologies)
clustersGRNS <- agnes(daiGRN, metric = "manhattan")
plot(clustersGRNS, which.plots = 1)
plot(clustersGRNS, which.plots = 2)
library(ggpubr)
library(factoextra)
install.packages("ggpubr")
singletopologies <- read.csv("output/singletopologies.csv")
singletopologies <- singletopologies[2:12]
# Compute k-means with k = 3
set.seed(123)
res.km <- kmeans(scale(singletopologies[, -5]), 3, nstart = 25)
# K-means clusters showing the group of each individuals
res.km$cluster
fviz_cluster(res.km, data = singletopologies[, -5],
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
library(ggpubr)
library(ggplot2)
library(ggpubr)
library(factoextra)
singletopologies <- read.csv("output/singletopologies.csv")
singletopologies <- singletopologies[2:12]
# Compute k-means with k = 3
set.seed(123)
res.km <- kmeans(scale(singletopologies[, -5]), 3, nstart = 25)
# K-means clusters showing the group of each individuals
res.km$cluster
fviz_cluster(res.km, data = singletopologies[, -5],
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
library(ggraph)
class(singleGRNS)
png(file = "figs/abundancehistogram.png")
library(vegan)
singletopologies <- read.csv("output/singletopologies.csv")
png(file = "figs/abundancehistogram.png")
hist(singletopologies$V1, breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange", main = "Abundance of
topologies")
dev.off()
png(file = "figs/abundancehistogram.png")
singletopologies <- read.csv("output/singletopologies.csv")
png(file = "figs/abundancehistogram.png")
hist(singletopologies$V1, breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange", main = "Abundance of
topologies")
class(singletopologies$V1)
View(singletopologies)
View(singletopologies)
singletopologies <- singletopologies[2:12]
png(file = "figs/abundancehistogram.png")
hist(singletopologies$V1, breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange", main = "Abundance of
topologies")
class(singletopologies)
GRNs <- read.csv("data/processed/GRNs.csv")
#GRN extraction
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[17]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
#GRN diversity analysis
library(plyr)
GRNs <- read.csv("data/processed/GRNs.csv")
#GRN extraction
signGRN <- sign(GRNs)
signGRN[1, ]#First GRN
#Unique circuits with duplications
duplicatedcircuits <- unique(signGRN)
abs(duplicatedcircuits)
#Number of times each circuit appers
singleGRNS <- ddply(signGRN, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
signGRNOcu[17]
numbinteracGRN <- ddply(abs(duplicatedcircuits), .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), sum)
GRNScomplexity <- transform(abs(duplicatedcircuits), sum = rowSums(abs(duplicatedcircuits)))
complexitylist <- GRNScomplexity[ , length(GRNScomplexity)] #List of complexity value per type of circuit
class(complexitylist)
#Histogram
png(file = "figs/complexityhistogram.png")
# Create the histogram.
hist(complexitylist, xlab = "Weight",col = "darkcyan")
dev.off()
hist(numeric(singletopologies$V1), breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange", main = "Abundance of
topologies")
singletopologies <- read.csv("output/singletopologies.csv")
singletopologies$V1
singletopologies <- read.csv("output/singletopologies.csv")
singletopologies$V1
singletopologies <- read.csv("output/singletopologies.csv")
singleGRNS <- read.csv("output/singleGRNS.csv")
singleGRNS <- read.csv("output/singleGRNs.csv")
#Topological considerations
data <- read.csv("data/raw/raw_grns.csv")
data <- data[,5:16]
library(plyr)
GRNs <- sign(data)
singleGRNS <- ddply(GRNs, .(MA,AA,BA,CA,MB,AB,BB,CB,MC,AC,BC,CC), nrow)
net <- singleGRNS[,-13]
net1 <- data.matrix(net)
net2 <- data.matrix(net)
net3 <- data.matrix(net)
net4 <- data.matrix(net)
net5 <- data.matrix(net)
source("C:/Users/Sebastian Espejo/OneDrive/Escritorio/GRN_circuit_analysis/R/02_topological_considerations.R", echo=TRUE)
singletopologies <- read.csv("output/singletopologies.csv")
singletopologies$V1
png(file = "figs/abundancehistogram.png")
hist(singletopologies$V1, breaks = 30, xlab = "Number of GRN ocurrances",
ylab = "Number of topologies", col = "orange", main = "Abundance of
topologies")
dev.off()
